{"ast":null,"code":"// src/query.ts\nimport { ensureQueryFn, noop, replaceData, resolveEnabled, skipToken, timeUntilStale } from \"./utils.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { canFetch, createRetryer, isCancelledError } from \"./retryer.js\";\nimport { Removable } from \"./removable.js\";\nvar Query = class extends Removable {\n  #initialState;\n  #revertState;\n  #cache;\n  #client;\n  #retryer;\n  #defaultOptions;\n  #abortSignalConsumed;\n\n  constructor(config) {\n    super();\n    this.#abortSignalConsumed = false;\n    this.#defaultOptions = config.defaultOptions;\n    this.setOptions(config.options);\n    this.observers = [];\n    this.#client = config.client;\n    this.#cache = this.#client.getQueryCache();\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    this.#initialState = getDefaultState(this.options);\n    this.state = config.state ?? this.#initialState;\n    this.scheduleGc();\n  }\n\n  get meta() {\n    return this.options.meta;\n  }\n\n  get promise() {\n    return this.#retryer?.promise;\n  }\n\n  setOptions(options) {\n    this.options = { ...this.#defaultOptions,\n      ...options\n    };\n    this.updateGcTime(this.options.gcTime);\n  }\n\n  optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === \"idle\") {\n      this.#cache.remove(this);\n    }\n  }\n\n  setData(newData, options) {\n    const data = replaceData(this.state.data, newData, this.options);\n    this.#dispatch({\n      data,\n      type: \"success\",\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual\n    });\n    return data;\n  }\n\n  setState(state, setStateOptions) {\n    this.#dispatch({\n      type: \"setState\",\n      state,\n      setStateOptions\n    });\n  }\n\n  cancel(options) {\n    const promise = this.#retryer?.promise;\n    this.#retryer?.cancel(options);\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n  }\n\n  destroy() {\n    super.destroy();\n    this.cancel({\n      silent: true\n    });\n  }\n\n  reset() {\n    this.destroy();\n    this.setState(this.#initialState);\n  }\n\n  isActive() {\n    return this.observers.some(observer => resolveEnabled(observer.options.enabled, this) !== false);\n  }\n\n  isDisabled() {\n    if (this.getObserversCount() > 0) {\n      return !this.isActive();\n    }\n\n    return this.options.queryFn === skipToken || this.state.dataUpdateCount + this.state.errorUpdateCount === 0;\n  }\n\n  isStale() {\n    if (this.state.isInvalidated) {\n      return true;\n    }\n\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(observer => observer.getCurrentResult().isStale);\n    }\n\n    return this.state.data === void 0;\n  }\n\n  isStaleByTime() {\n    let staleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return this.state.isInvalidated || this.state.data === void 0 || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n  }\n\n  onFocus() {\n    const observer = this.observers.find(x => x.shouldFetchOnWindowFocus());\n    observer?.refetch({\n      cancelRefetch: false\n    });\n    this.#retryer?.continue();\n  }\n\n  onOnline() {\n    const observer = this.observers.find(x => x.shouldFetchOnReconnect());\n    observer?.refetch({\n      cancelRefetch: false\n    });\n    this.#retryer?.continue();\n  }\n\n  addObserver(observer) {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer);\n      this.clearGcTimeout();\n      this.#cache.notify({\n        type: \"observerAdded\",\n        query: this,\n        observer\n      });\n    }\n  }\n\n  removeObserver(observer) {\n    if (this.observers.includes(observer)) {\n      this.observers = this.observers.filter(x => x !== observer);\n\n      if (!this.observers.length) {\n        if (this.#retryer) {\n          if (this.#abortSignalConsumed) {\n            this.#retryer.cancel({\n              revert: true\n            });\n          } else {\n            this.#retryer.cancelRetry();\n          }\n        }\n\n        this.scheduleGc();\n      }\n\n      this.#cache.notify({\n        type: \"observerRemoved\",\n        query: this,\n        observer\n      });\n    }\n  }\n\n  getObserversCount() {\n    return this.observers.length;\n  }\n\n  invalidate() {\n    if (!this.state.isInvalidated) {\n      this.#dispatch({\n        type: \"invalidate\"\n      });\n    }\n  }\n\n  fetch(options, fetchOptions) {\n    if (this.state.fetchStatus !== \"idle\") {\n      if (this.state.data !== void 0 && fetchOptions?.cancelRefetch) {\n        this.cancel({\n          silent: true\n        });\n      } else if (this.#retryer) {\n        this.#retryer.continueRetry();\n        return this.#retryer.promise;\n      }\n    }\n\n    if (options) {\n      this.setOptions(options);\n    }\n\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn);\n\n      if (observer) {\n        this.setOptions(observer.options);\n      }\n    }\n\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!Array.isArray(this.options.queryKey)) {\n        console.error(`As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`);\n      }\n    }\n\n    const abortController = new AbortController();\n\n    const addSignalProperty = object => {\n      Object.defineProperty(object, \"signal\", {\n        enumerable: true,\n        get: () => {\n          this.#abortSignalConsumed = true;\n          return abortController.signal;\n        }\n      });\n    };\n\n    const fetchFn = () => {\n      const queryFn = ensureQueryFn(this.options, fetchOptions);\n      const queryFnContext = {\n        client: this.#client,\n        queryKey: this.queryKey,\n        meta: this.meta\n      };\n      addSignalProperty(queryFnContext);\n      this.#abortSignalConsumed = false;\n\n      if (this.options.persister) {\n        return this.options.persister(queryFn, queryFnContext, this);\n      }\n\n      return queryFn(queryFnContext);\n    };\n\n    const context = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      client: this.#client,\n      state: this.state,\n      fetchFn\n    };\n    addSignalProperty(context);\n    this.options.behavior?.onFetch(context, this);\n    this.#revertState = this.state;\n\n    if (this.state.fetchStatus === \"idle\" || this.state.fetchMeta !== context.fetchOptions?.meta) {\n      this.#dispatch({\n        type: \"fetch\",\n        meta: context.fetchOptions?.meta\n      });\n    }\n\n    const onError = error => {\n      if (!(isCancelledError(error) && error.silent)) {\n        this.#dispatch({\n          type: \"error\",\n          error\n        });\n      }\n\n      if (!isCancelledError(error)) {\n        this.#cache.config.onError?.(error, this);\n        this.#cache.config.onSettled?.(this.state.data, error, this);\n      }\n\n      this.scheduleGc();\n    };\n\n    this.#retryer = createRetryer({\n      initialPromise: fetchOptions?.initialPromise,\n      fn: context.fetchFn,\n      abort: abortController.abort.bind(abortController),\n      onSuccess: data => {\n        if (data === void 0) {\n          if (process.env.NODE_ENV !== \"production\") {\n            console.error(`Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`);\n          }\n\n          onError(new Error(`${this.queryHash} data is undefined`));\n          return;\n        }\n\n        try {\n          this.setData(data);\n        } catch (error) {\n          onError(error);\n          return;\n        }\n\n        this.#cache.config.onSuccess?.(data, this);\n        this.#cache.config.onSettled?.(data, this.state.error, this);\n        this.scheduleGc();\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.#dispatch({\n          type: \"failed\",\n          failureCount,\n          error\n        });\n      },\n      onPause: () => {\n        this.#dispatch({\n          type: \"pause\"\n        });\n      },\n      onContinue: () => {\n        this.#dispatch({\n          type: \"continue\"\n        });\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n      canRun: () => true\n    });\n    return this.#retryer.start();\n  }\n\n  #dispatch(action) {\n    const reducer = state => {\n      switch (action.type) {\n        case \"failed\":\n          return { ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error\n          };\n\n        case \"pause\":\n          return { ...state,\n            fetchStatus: \"paused\"\n          };\n\n        case \"continue\":\n          return { ...state,\n            fetchStatus: \"fetching\"\n          };\n\n        case \"fetch\":\n          return { ...state,\n            ...fetchState(state.data, this.options),\n            fetchMeta: action.meta ?? null\n          };\n\n        case \"success\":\n          return { ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: \"success\",\n            ...(!action.manual && {\n              fetchStatus: \"idle\",\n              fetchFailureCount: 0,\n              fetchFailureReason: null\n            })\n          };\n\n        case \"error\":\n          const error = action.error;\n\n          if (isCancelledError(error) && error.revert && this.#revertState) {\n            return { ...this.#revertState,\n              fetchStatus: \"idle\"\n            };\n          }\n\n          return { ...state,\n            error,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error,\n            fetchStatus: \"idle\",\n            status: \"error\"\n          };\n\n        case \"invalidate\":\n          return { ...state,\n            isInvalidated: true\n          };\n\n        case \"setState\":\n          return { ...state,\n            ...action.state\n          };\n      }\n    };\n\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate();\n      });\n      this.#cache.notify({\n        query: this,\n        type: \"updated\",\n        action\n      });\n    });\n  }\n\n};\n\nfunction fetchState(data, options) {\n  return {\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchStatus: canFetch(options.networkMode) ? \"fetching\" : \"paused\",\n    ...(data === void 0 && {\n      error: null,\n      status: \"pending\"\n    })\n  };\n}\n\nfunction getDefaultState(options) {\n  const data = typeof options.initialData === \"function\" ? options.initialData() : options.initialData;\n  const hasData = data !== void 0;\n  const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === \"function\" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? \"success\" : \"pending\",\n    fetchStatus: \"idle\"\n  };\n}\n\nexport { Query, fetchState };","map":{"version":3,"mappings":"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","names":["ensureQueryFn","noop","replaceData","resolveEnabled","skipToken","timeUntilStale","notifyManager","canFetch","createRetryer","isCancelledError","Removable","Query","constructor","config","defaultOptions","setOptions","options","observers","client","getQueryCache","queryKey","queryHash","getDefaultState","state","scheduleGc","meta","promise","updateGcTime","gcTime","optionalRemove","length","fetchStatus","remove","setData","newData","data","type","dataUpdatedAt","updatedAt","manual","setState","setStateOptions","cancel","then","catch","Promise","resolve","destroy","silent","reset","isActive","some","observer","enabled","isDisabled","getObserversCount","queryFn","dataUpdateCount","errorUpdateCount","isStale","isInvalidated","getCurrentResult","isStaleByTime","staleTime","onFocus","find","x","shouldFetchOnWindowFocus","refetch","cancelRefetch","continue","onOnline","shouldFetchOnReconnect","addObserver","includes","push","clearGcTimeout","notify","query","removeObserver","filter","revert","cancelRetry","invalidate","fetch","fetchOptions","continueRetry","process","env","NODE_ENV","Array","isArray","console","error","abortController","AbortController","addSignalProperty","object","Object","defineProperty","enumerable","get","signal","fetchFn","queryFnContext","persister","context","behavior","onFetch","fetchMeta","onError","onSettled","initialPromise","fn","abort","bind","onSuccess","Error","onFail","failureCount","onPause","onContinue","retry","retryDelay","networkMode","canRun","start","action","reducer","fetchFailureCount","fetchFailureReason","fetchState","Date","now","status","errorUpdatedAt","batch","forEach","onQueryUpdate","initialData","hasData","initialDataUpdatedAt"],"sources":["/Users/harshini/Desktop/Social/client/node_modules/@tanstack/query-core/src/query.ts"],"sourcesContent":["import {\n  ensureQueryFn,\n  noop,\n  replaceData,\n  resolveEnabled,\n  skipToken,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport { canFetch, createRetryer, isCancelledError } from './retryer'\nimport { Removable } from './removable'\nimport type { QueryCache } from './queryCache'\nimport type { QueryClient } from './queryClient'\nimport type {\n  CancelOptions,\n  DefaultError,\n  FetchStatus,\n  InitialDataFunction,\n  OmitKeyof,\n  QueryFunction,\n  QueryFunctionContext,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n  QueryStatus,\n  SetDataOptions,\n} from './types'\nimport type { QueryObserver } from './queryObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  client: QueryClient\n  queryKey: TQueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = DefaultError> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchFailureReason: TError | null\n  fetchMeta: FetchMeta | null\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  client: QueryClient\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n    query: Query,\n  ) => void\n}\n\nexport type FetchDirection = 'forward' | 'backward'\n\nexport interface FetchMeta {\n  fetchMore?: { direction: FetchDirection }\n}\n\nexport interface FetchOptions<TData = unknown> {\n  cancelRefetch?: boolean\n  meta?: FetchMeta\n  initialPromise?: Promise<TData>\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: FetchMeta\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: Partial<QueryState<TData, TError>>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state: QueryState<TData, TError>\n\n  #initialState: QueryState<TData, TError>\n  #revertState?: QueryState<TData, TError>\n  #cache: QueryCache\n  #client: QueryClient\n  #retryer?: Retryer<TData>\n  observers: Array<QueryObserver<any, any, any, any, any>>\n  #defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  #abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.#abortSignalConsumed = false\n    this.#defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.#client = config.client\n    this.#cache = this.#client.getQueryCache()\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.#initialState = getDefaultState(this.options)\n    this.state = config.state ?? this.#initialState\n    this.scheduleGc()\n  }\n  get meta(): QueryMeta | undefined {\n    return this.options.meta\n  }\n\n  get promise(): Promise<TData> | undefined {\n    return this.#retryer?.promise\n  }\n\n  setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): void {\n    this.options = { ...this.#defaultOptions, ...options }\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.#cache.remove(this)\n    }\n  }\n\n  setData(\n    newData: TData,\n    options?: SetDataOptions & { manual: boolean },\n  ): TData {\n    const data = replaceData(this.state.data, newData, this.options)\n\n    // Set data and mark it as cached\n    this.#dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: Partial<QueryState<TData, TError>>,\n    setStateOptions?: SetStateOptions,\n  ): void {\n    this.#dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.#retryer?.promise\n    this.#retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.#initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(\n      (observer) => resolveEnabled(observer.options.enabled, this) !== false,\n    )\n  }\n\n  isDisabled(): boolean {\n    if (this.getObserversCount() > 0) {\n      return !this.isActive()\n    }\n    // if a query has no observers, it should still be considered disabled if it never attempted a fetch\n    return (\n      this.options.queryFn === skipToken ||\n      this.state.dataUpdateCount + this.state.errorUpdateCount === 0\n    )\n  }\n\n  isStale(): boolean {\n    if (this.state.isInvalidated) {\n      return true\n    }\n\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(\n        (observer) => observer.getCurrentResult().isStale,\n      )\n    }\n\n    return this.state.data === undefined\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      this.state.data === undefined ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnReconnect())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.#cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.includes(observer)) {\n      this.observers = this.observers.filter((x) => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.#retryer) {\n          if (this.#abortSignalConsumed) {\n            this.#retryer.cancel({ revert: true })\n          } else {\n            this.#retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.#cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.#dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions<TQueryFnData>,\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.data !== undefined && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetch\n        this.cancel({ silent: true })\n      } else if (this.#retryer) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.#retryer.continueRetry()\n        // Return current promise if we are already fetching\n        return this.#retryer.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find((x) => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!Array.isArray(this.options.queryKey)) {\n        console.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`,\n        )\n      }\n    }\n\n    const abortController = new AbortController()\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          this.#abortSignalConsumed = true\n          return abortController.signal\n        },\n      })\n    }\n\n    // Create fetch function\n    const fetchFn = () => {\n      const queryFn = ensureQueryFn(this.options, fetchOptions)\n\n      // Create query function context\n      const queryFnContext: OmitKeyof<\n        QueryFunctionContext<TQueryKey>,\n        'signal'\n      > = {\n        client: this.#client,\n        queryKey: this.queryKey,\n        meta: this.meta,\n      }\n\n      addSignalProperty(queryFnContext)\n\n      this.#abortSignalConsumed = false\n      if (this.options.persister) {\n        return this.options.persister(\n          queryFn as QueryFunction<any>,\n          queryFnContext as QueryFunctionContext<TQueryKey>,\n          this as unknown as Query,\n        )\n      }\n\n      return queryFn(queryFnContext as QueryFunctionContext<TQueryKey>)\n    }\n\n    // Trigger behavior hook\n    const context: OmitKeyof<\n      FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n      'signal'\n    > = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      client: this.#client,\n      state: this.state,\n      fetchFn,\n    }\n\n    addSignalProperty(context)\n\n    this.options.behavior?.onFetch(\n      context as FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n      this as unknown as Query,\n    )\n\n    // Store state in case the current fetch needs to be reverted\n    this.#revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.#dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.#dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.#cache.config.onError?.(\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n        this.#cache.config.onSettled?.(\n          this.state.data,\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n      }\n\n      // Schedule query gc after fetching\n      this.scheduleGc()\n    }\n\n    // Try to fetch the data\n    this.#retryer = createRetryer({\n      initialPromise: fetchOptions?.initialPromise as\n        | Promise<TData>\n        | undefined,\n      fn: context.fetchFn as () => Promise<TData>,\n      abort: abortController.abort.bind(abortController),\n      onSuccess: (data) => {\n        if (data === undefined) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error(\n              `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`,\n            )\n          }\n          onError(new Error(`${this.queryHash} data is undefined`) as any)\n          return\n        }\n\n        try {\n          this.setData(data)\n        } catch (error) {\n          onError(error as TError)\n          return\n        }\n\n        // Notify cache callback\n        this.#cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n        this.#cache.config.onSettled?.(\n          data,\n          this.state.error as any,\n          this as Query<any, any, any, any>,\n        )\n\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.#dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n      canRun: () => true,\n    })\n\n    return this.#retryer.start()\n  }\n\n  #dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>,\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            ...fetchState(state.data, this.options),\n            fetchMeta: action.meta ?? null,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null,\n            }),\n          }\n        case 'error':\n          const error = action.error\n\n          if (isCancelledError(error) && error.revert && this.#revertState) {\n            return { ...this.#revertState, fetchStatus: 'idle' }\n          }\n\n          return {\n            ...state,\n            error,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onQueryUpdate()\n      })\n\n      this.#cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nexport function fetchState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  data: TData | undefined,\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n) {\n  return {\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchStatus: canFetch(options.networkMode) ? 'fetching' : 'paused',\n    ...(data === undefined &&\n      ({\n        error: null,\n        status: 'pending',\n      } as const)),\n  } as const\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasData = data !== undefined\n\n  const initialDataUpdatedAt = hasData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? (initialDataUpdatedAt ?? Date.now()) : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'pending',\n    fetchStatus: 'idle',\n  }\n}\n"]},"metadata":{},"sourceType":"module"}