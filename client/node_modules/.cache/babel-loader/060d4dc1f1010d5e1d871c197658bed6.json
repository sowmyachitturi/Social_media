{"ast":null,"code":"// src/mutation.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Removable } from \"./removable.js\";\nimport { createRetryer } from \"./retryer.js\";\nvar Mutation = class extends Removable {\n  #observers;\n  #mutationCache;\n  #retryer;\n\n  constructor(config) {\n    super();\n    this.mutationId = config.mutationId;\n    this.#mutationCache = config.mutationCache;\n    this.#observers = [];\n    this.state = config.state || getDefaultState();\n    this.setOptions(config.options);\n    this.scheduleGc();\n  }\n\n  setOptions(options) {\n    this.options = options;\n    this.updateGcTime(this.options.gcTime);\n  }\n\n  get meta() {\n    return this.options.meta;\n  }\n\n  addObserver(observer) {\n    if (!this.#observers.includes(observer)) {\n      this.#observers.push(observer);\n      this.clearGcTimeout();\n      this.#mutationCache.notify({\n        type: \"observerAdded\",\n        mutation: this,\n        observer\n      });\n    }\n  }\n\n  removeObserver(observer) {\n    this.#observers = this.#observers.filter(x => x !== observer);\n    this.scheduleGc();\n    this.#mutationCache.notify({\n      type: \"observerRemoved\",\n      mutation: this,\n      observer\n    });\n  }\n\n  optionalRemove() {\n    if (!this.#observers.length) {\n      if (this.state.status === \"pending\") {\n        this.scheduleGc();\n      } else {\n        this.#mutationCache.remove(this);\n      }\n    }\n  }\n\n  continue() {\n    return this.#retryer?.continue() ?? // continuing a mutation assumes that variables are set, mutation must have been dehydrated before\n    this.execute(this.state.variables);\n  }\n\n  async execute(variables) {\n    this.#retryer = createRetryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject(new Error(\"No mutationFn found\"));\n        }\n\n        return this.options.mutationFn(variables);\n      },\n      onFail: (failureCount, error) => {\n        this.#dispatch({\n          type: \"failed\",\n          failureCount,\n          error\n        });\n      },\n      onPause: () => {\n        this.#dispatch({\n          type: \"pause\"\n        });\n      },\n      onContinue: () => {\n        this.#dispatch({\n          type: \"continue\"\n        });\n      },\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n      networkMode: this.options.networkMode,\n      canRun: () => this.#mutationCache.canRun(this)\n    });\n    const restored = this.state.status === \"pending\";\n    const isPaused = !this.#retryer.canStart();\n\n    try {\n      if (!restored) {\n        this.#dispatch({\n          type: \"pending\",\n          variables,\n          isPaused\n        });\n        await this.#mutationCache.config.onMutate?.(variables, this);\n        const context = await this.options.onMutate?.(variables);\n\n        if (context !== this.state.context) {\n          this.#dispatch({\n            type: \"pending\",\n            context,\n            variables,\n            isPaused\n          });\n        }\n      }\n\n      const data = await this.#retryer.start();\n      await this.#mutationCache.config.onSuccess?.(data, variables, this.state.context, this);\n      await this.options.onSuccess?.(data, variables, this.state.context);\n      await this.#mutationCache.config.onSettled?.(data, null, this.state.variables, this.state.context, this);\n      await this.options.onSettled?.(data, null, variables, this.state.context);\n      this.#dispatch({\n        type: \"success\",\n        data\n      });\n      return data;\n    } catch (error) {\n      try {\n        await this.#mutationCache.config.onError?.(error, variables, this.state.context, this);\n        await this.options.onError?.(error, variables, this.state.context);\n        await this.#mutationCache.config.onSettled?.(void 0, error, this.state.variables, this.state.context, this);\n        await this.options.onSettled?.(void 0, error, variables, this.state.context);\n        throw error;\n      } finally {\n        this.#dispatch({\n          type: \"error\",\n          error\n        });\n      }\n    } finally {\n      this.#mutationCache.runNext(this);\n    }\n  }\n\n  #dispatch(action) {\n    const reducer = state => {\n      switch (action.type) {\n        case \"failed\":\n          return { ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error\n          };\n\n        case \"pause\":\n          return { ...state,\n            isPaused: true\n          };\n\n        case \"continue\":\n          return { ...state,\n            isPaused: false\n          };\n\n        case \"pending\":\n          return { ...state,\n            context: action.context,\n            data: void 0,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: action.isPaused,\n            status: \"pending\",\n            variables: action.variables,\n            submittedAt: Date.now()\n          };\n\n        case \"success\":\n          return { ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: \"success\",\n            isPaused: false\n          };\n\n        case \"error\":\n          return { ...state,\n            data: void 0,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: \"error\"\n          };\n      }\n    };\n\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.#observers.forEach(observer => {\n        observer.onMutationUpdate(action);\n      });\n      this.#mutationCache.notify({\n        mutation: this,\n        type: \"updated\",\n        action\n      });\n    });\n  }\n\n};\n\nfunction getDefaultState() {\n  return {\n    context: void 0,\n    data: void 0,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: \"idle\",\n    variables: void 0,\n    submittedAt: 0\n  };\n}\n\nexport { Mutation, getDefaultState };","map":{"version":3,"mappings":";AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,aAAT,QAA8B,cAA9B;AA8EO,IAAMC,WAAN,cAKGF,SALH,CAKa;AAKlB;AACA;AACA;;AAEAG,cAAYC,MAAZ,EAAyE;AACvE;AAEA,SAAKC,UAAL,GAAkBD,OAAOC,UAAzB;AACA,SAAK,cAAL,GAAsBD,OAAOE,aAA7B;AACA,SAAK,UAAL,GAAkB,EAAlB;AACA,SAAKC,KAAL,GAAaH,OAAOG,KAAP,IAAgBC,iBAA7B;AAEA,SAAKC,UAAL,CAAgBL,OAAOM,OAAvB;AACA,SAAKC,UAAL;AACF;;AAEAF,aACEC,OADF,EAEQ;AACN,SAAKA,OAAL,GAAeA,OAAf;AAEA,SAAKE,YAAL,CAAkB,KAAKF,OAAL,CAAaG,MAA/B;AACF;;AAEI,aAAiC;AACnC,WAAO,KAAKH,OAAL,CAAaI,IAApB;AACF;;AAEAC,cAAYC,QAAZ,EAAkE;AAChE,QAAI,CAAC,KAAK,UAAL,CAAgBC,QAAhB,CAAyBD,QAAzB,CAAL,EAAyC;AACvC,WAAK,UAAL,CAAgBE,IAAhB,CAAqBF,QAArB;AAGA,WAAKG,cAAL;AAEA,WAAK,cAAL,CAAoBC,MAApB,CAA2B;AACzBC,cAAM,eADmB;AAEzBC,kBAAU,IAFe;AAGzBN;AAHyB,OAA3B;AAKF;AACF;;AAEAO,iBAAeP,QAAf,EAAqE;AACnE,SAAK,UAAL,GAAkB,KAAK,UAAL,CAAgBQ,MAAhB,CAAwBC,CAAD,IAAOA,MAAMT,QAApC,CAAlB;AAEA,SAAKL,UAAL;AAEA,SAAK,cAAL,CAAoBS,MAApB,CAA2B;AACzBC,YAAM,iBADmB;AAEzBC,gBAAU,IAFe;AAGzBN;AAHyB,KAA3B;AAKF;;AAEUU,mBAAiB;AACzB,QAAI,CAAC,KAAK,UAAL,CAAgBC,MAArB,EAA6B;AAC3B,UAAI,KAAKpB,KAAL,CAAWqB,MAAX,KAAsB,SAA1B,EAAqC;AACnC,aAAKjB,UAAL;AACF,OAFA,MAEO;AACL,aAAK,cAAL,CAAoBkB,MAApB,CAA2B,IAA3B;AACF;AACF;AACF;;AAEAC,aAA6B;AAC3B,WACE,KAAK,QAAL,EAAeA,QAAf,MAAwB;AAExB,SAAKC,OAAL,CAAa,KAAKxB,KAAL,CAAWyB,SAAxB,CAHF;AAKF;;AAEM,gBAAQA,SAAR,EAA+C;AACnD,SAAK,QAAL,GAAgB/B,cAAc;AAC5BgC,UAAI,MAAM;AACR,YAAI,CAAC,KAAKvB,OAAL,CAAawB,UAAlB,EAA8B;AAC5B,iBAAOC,QAAQC,MAAR,CAAe,IAAIC,KAAJ,CAAU,qBAAV,CAAf,CAAP;AACF;;AACA,eAAO,KAAK3B,OAAL,CAAawB,UAAb,CAAwBF,SAAxB,CAAP;AACF,OAN4B;AAO5BM,cAAQ,CAACC,YAAD,EAAeC,KAAf,KAAyB;AAC/B,aAAK,SAAL,CAAe;AAAEnB,gBAAM,QAAR;AAAkBkB,sBAAlB;AAAgCC;AAAhC,SAAf;AACF,OAT4B;AAU5BC,eAAS,MAAM;AACb,aAAK,SAAL,CAAe;AAAEpB,gBAAM;AAAR,SAAf;AACF,OAZ4B;AAa5BqB,kBAAY,MAAM;AAChB,aAAK,SAAL,CAAe;AAAErB,gBAAM;AAAR,SAAf;AACF,OAf4B;AAgB5BsB,aAAO,KAAKjC,OAAL,CAAaiC,KAAb,IAAsB,CAhBD;AAiB5BC,kBAAY,KAAKlC,OAAL,CAAakC,UAjBG;AAkB5BC,mBAAa,KAAKnC,OAAL,CAAamC,WAlBE;AAmB5BC,cAAQ,MAAM,KAAK,cAAL,CAAoBA,MAApB,CAA2B,IAA3B;AAnBc,KAAd,CAAhB;AAsBA,UAAMC,WAAW,KAAKxC,KAAL,CAAWqB,MAAX,KAAsB,SAAvC;AACA,UAAMoB,WAAW,CAAC,KAAK,QAAL,CAAcC,QAAd,EAAlB;;AAEA,QAAI;AACF,UAAI,CAACF,QAAL,EAAe;AACb,aAAK,SAAL,CAAe;AAAE1B,gBAAM,SAAR;AAAmBW,mBAAnB;AAA8BgB;AAA9B,SAAf;AAEA,cAAM,KAAK,cAAL,CAAoB5C,MAApB,CAA2B8C,QAA3B,GACJlB,SADI,EAEJ,IAFI,CAAN;AAIA,cAAMmB,UAAU,MAAM,KAAKzC,OAAL,CAAawC,QAAb,GAAwBlB,SAAxB,CAAtB;;AACA,YAAImB,YAAY,KAAK5C,KAAL,CAAW4C,OAA3B,EAAoC;AAClC,eAAK,SAAL,CAAe;AACb9B,kBAAM,SADO;AAEb8B,mBAFa;AAGbnB,qBAHa;AAIbgB;AAJa,WAAf;AAMF;AACF;;AACA,YAAMI,OAAO,MAAM,KAAK,QAAL,CAAcC,KAAd,EAAnB;AAGA,YAAM,KAAK,cAAL,CAAoBjD,MAApB,CAA2BkD,SAA3B,GACJF,IADI,EAEJpB,SAFI,EAGJ,KAAKzB,KAAL,CAAW4C,OAHP,EAIJ,IAJI,CAAN;AAOA,YAAM,KAAKzC,OAAL,CAAa4C,SAAb,GAAyBF,IAAzB,EAA+BpB,SAA/B,EAA0C,KAAKzB,KAAL,CAAW4C,OAArD,CAAN;AAGA,YAAM,KAAK,cAAL,CAAoB/C,MAApB,CAA2BmD,SAA3B,GACJH,IADI,EAEJ,IAFI,EAGJ,KAAK7C,KAAL,CAAWyB,SAHP,EAIJ,KAAKzB,KAAL,CAAW4C,OAJP,EAKJ,IALI,CAAN;AAQA,YAAM,KAAKzC,OAAL,CAAa6C,SAAb,GAAyBH,IAAzB,EAA+B,IAA/B,EAAqCpB,SAArC,EAAgD,KAAKzB,KAAL,CAAW4C,OAA3D,CAAN;AAEA,WAAK,SAAL,CAAe;AAAE9B,cAAM,SAAR;AAAmB+B;AAAnB,OAAf;AACA,aAAOA,IAAP;AACF,KA3CA,CA2CA,OAASZ,KAAT,EAAgB;AACd,UAAI;AAEF,cAAM,KAAK,cAAL,CAAoBpC,MAApB,CAA2BoD,OAA3B,GACJhB,KADI,EAEJR,SAFI,EAGJ,KAAKzB,KAAL,CAAW4C,OAHP,EAIJ,IAJI,CAAN;AAOA,cAAM,KAAKzC,OAAL,CAAa8C,OAAb,GACJhB,KADI,EAEJR,SAFI,EAGJ,KAAKzB,KAAL,CAAW4C,OAHP,CAAN;AAOA,cAAM,KAAK,cAAL,CAAoB/C,MAApB,CAA2BmD,SAA3B,GACJ,MADI,EAEJf,KAFI,EAGJ,KAAKjC,KAAL,CAAWyB,SAHP,EAIJ,KAAKzB,KAAL,CAAW4C,OAJP,EAKJ,IALI,CAAN;AAQA,cAAM,KAAKzC,OAAL,CAAa6C,SAAb,GACJ,MADI,EAEJf,KAFI,EAGJR,SAHI,EAIJ,KAAKzB,KAAL,CAAW4C,OAJP,CAAN;AAMA,cAAMX,KAAN;AACF,OA/BA,SA+BE;AACA,aAAK,SAAL,CAAe;AAAEnB,gBAAM,OAAR;AAAiBmB;AAAjB,SAAf;AACF;AACF,KA9EA,SA8EE;AACA,WAAK,cAAL,CAAoBiB,OAApB,CAA4B,IAA5B;AACF;AACF;;AAEA,YAAUC,MAAV,EAAqE;AACnE,UAAMC,UACJpD,KADc,IAEyC;AACvD,cAAQmD,OAAOrC,IAAf;AACE,aAAK,QAAL;AACE,iBAAO,EACL,GAAGd,KADE;AAELgC,0BAAcmB,OAAOnB,YAFhB;AAGLqB,2BAAeF,OAAOlB;AAHjB,WAAP;;AAKF,aAAK,OAAL;AACE,iBAAO,EACL,GAAGjC,KADE;AAELyC,sBAAU;AAFL,WAAP;;AAIF,aAAK,UAAL;AACE,iBAAO,EACL,GAAGzC,KADE;AAELyC,sBAAU;AAFL,WAAP;;AAIF,aAAK,SAAL;AACE,iBAAO,EACL,GAAGzC,KADE;AAEL4C,qBAASO,OAAOP,OAFX;AAGLC,kBAAM,MAHD;AAILb,0BAAc,CAJT;AAKLqB,2BAAe,IALV;AAMLpB,mBAAO,IANF;AAOLQ,sBAAUU,OAAOV,QAPZ;AAQLpB,oBAAQ,SARH;AASLI,uBAAW0B,OAAO1B,SATb;AAUL6B,yBAAaC,KAAKC,GAAL;AAVR,WAAP;;AAYF,aAAK,SAAL;AACE,iBAAO,EACL,GAAGxD,KADE;AAEL6C,kBAAMM,OAAON,IAFR;AAGLb,0BAAc,CAHT;AAILqB,2BAAe,IAJV;AAKLpB,mBAAO,IALF;AAMLZ,oBAAQ,SANH;AAOLoB,sBAAU;AAPL,WAAP;;AASF,aAAK,OAAL;AACE,iBAAO,EACL,GAAGzC,KADE;AAEL6C,kBAAM,MAFD;AAGLZ,mBAAOkB,OAAOlB,KAHT;AAILD,0BAAchC,MAAMgC,YAAN,GAAqB,CAJ9B;AAKLqB,2BAAeF,OAAOlB,KALjB;AAMLQ,sBAAU,KANL;AAOLpB,oBAAQ;AAPH,WAAP;AAzCJ;AAmDF,KAtDA;;AAuDA,SAAKrB,KAAL,GAAaoD,QAAQ,KAAKpD,KAAb,CAAb;AAEAR,kBAAciE,KAAd,CAAoB,MAAM;AACxB,WAAK,UAAL,CAAgBC,OAAhB,CAAyBjD,QAAD,IAAc;AACpCA,iBAASkD,gBAAT,CAA0BR,MAA1B;AACD,OAFD;AAGA,WAAK,cAAL,CAAoBtC,MAApB,CAA2B;AACzBE,kBAAU,IADe;AAEzBD,cAAM,SAFmB;AAGzBqC;AAHyB,OAA3B;AAKD,KATD;AAUF;;AA/PkB,CALb;;AAuQA,SAASlD,eAAT,GAKiD;AACtD,SAAO;AACL2C,aAAS,MADJ;AAELC,UAAM,MAFD;AAGLZ,WAAO,IAHF;AAILD,kBAAc,CAJT;AAKLqB,mBAAe,IALV;AAMLZ,cAAU,KANL;AAOLpB,YAAQ,MAPH;AAQLI,eAAW,MARN;AASL6B,iBAAa;AATR,GAAP;AAWF","names":["notifyManager","Removable","createRetryer","Mutation","constructor","config","mutationId","mutationCache","state","getDefaultState","setOptions","options","scheduleGc","updateGcTime","gcTime","meta","addObserver","observer","includes","push","clearGcTimeout","notify","type","mutation","removeObserver","filter","x","optionalRemove","length","status","remove","continue","execute","variables","fn","mutationFn","Promise","reject","Error","onFail","failureCount","error","onPause","onContinue","retry","retryDelay","networkMode","canRun","restored","isPaused","canStart","onMutate","context","data","start","onSuccess","onSettled","onError","runNext","action","reducer","failureReason","submittedAt","Date","now","batch","forEach","onMutationUpdate"],"sources":["/Users/harshini/Desktop/Social/client/node_modules/@tanstack/query-core/src/mutation.ts"],"sourcesContent":["import { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport { createRetryer } from './retryer'\nimport type {\n  DefaultError,\n  MutationMeta,\n  MutationOptions,\n  MutationStatus,\n} from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  failureReason: TError | null\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n  submittedAt: number\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError | null\n}\n\ninterface PendingAction<TVariables, TContext> {\n  type: 'pending'\n  isPaused: boolean\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | PendingAction<TVariables, TContext>\n  | PauseAction\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options!: MutationOptions<TData, TError, TVariables, TContext>\n  readonly mutationId: number\n\n  #observers: Array<MutationObserver<TData, TError, TVariables, TContext>>\n  #mutationCache: MutationCache\n  #retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.mutationId = config.mutationId\n    this.#mutationCache = config.mutationCache\n    this.#observers = []\n    this.state = config.state || getDefaultState()\n\n    this.setOptions(config.options)\n    this.scheduleGc()\n  }\n\n  setOptions(\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n  ): void {\n    this.options = options\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  get meta(): MutationMeta | undefined {\n    return this.options.meta\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (!this.#observers.includes(observer)) {\n      this.#observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.#mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.#observers = this.#observers.filter((x) => x !== observer)\n\n    this.scheduleGc()\n\n    this.#mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.#observers.length) {\n      if (this.state.status === 'pending') {\n        this.scheduleGc()\n      } else {\n        this.#mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<unknown> {\n    return (\n      this.#retryer?.continue() ??\n      // continuing a mutation assumes that variables are set, mutation must have been dehydrated before\n      this.execute(this.state.variables!)\n    )\n  }\n\n  async execute(variables: TVariables): Promise<TData> {\n    this.#retryer = createRetryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject(new Error('No mutationFn found'))\n        }\n        return this.options.mutationFn(variables)\n      },\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.#dispatch({ type: 'continue' })\n      },\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n      networkMode: this.options.networkMode,\n      canRun: () => this.#mutationCache.canRun(this),\n    })\n\n    const restored = this.state.status === 'pending'\n    const isPaused = !this.#retryer.canStart()\n\n    try {\n      if (!restored) {\n        this.#dispatch({ type: 'pending', variables, isPaused })\n        // Notify cache callback\n        await this.#mutationCache.config.onMutate?.(\n          variables,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n        const context = await this.options.onMutate?.(variables)\n        if (context !== this.state.context) {\n          this.#dispatch({\n            type: 'pending',\n            context,\n            variables,\n            isPaused,\n          })\n        }\n      }\n      const data = await this.#retryer.start()\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSuccess?.(\n        data,\n        variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSuccess?.(data, variables, this.state.context!)\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSettled?.(\n        data,\n        null,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSettled?.(data, null, variables, this.state.context)\n\n      this.#dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        await this.#mutationCache.config.onError?.(\n          error as any,\n          variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onError?.(\n          error as TError,\n          variables,\n          this.state.context,\n        )\n\n        // Notify cache callback\n        await this.#mutationCache.config.onSettled?.(\n          undefined,\n          error as any,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          variables,\n          this.state.context,\n        )\n        throw error\n      } finally {\n        this.#dispatch({ type: 'error', error: error as TError })\n      }\n    } finally {\n      this.#mutationCache.runNext(this)\n    }\n  }\n\n  #dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>,\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'pending':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: action.isPaused,\n            status: 'pending',\n            variables: action.variables,\n            submittedAt: Date.now(),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error',\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.#observers.forEach((observer) => {\n        observer.onMutationUpdate(action)\n      })\n      this.#mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n    submittedAt: 0,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}