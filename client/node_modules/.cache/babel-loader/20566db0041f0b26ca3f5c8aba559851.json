{"ast":null,"code":"// src/notifyManager.ts\nfunction createNotifyManager() {\n  let queue = [];\n  let transactions = 0;\n\n  let notifyFn = callback => {\n    callback();\n  };\n\n  let batchNotifyFn = callback => {\n    callback();\n  };\n\n  let scheduleFn = cb => setTimeout(cb, 0);\n\n  const schedule = callback => {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleFn(() => {\n        notifyFn(callback);\n      });\n    }\n  };\n\n  const flush = () => {\n    const originalQueue = queue;\n    queue = [];\n\n    if (originalQueue.length) {\n      scheduleFn(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n\n  return {\n    batch: callback => {\n      let result;\n      transactions++;\n\n      try {\n        result = callback();\n      } finally {\n        transactions--;\n\n        if (!transactions) {\n          flush();\n        }\n      }\n\n      return result;\n    },\n\n    /**\n     * All calls to the wrapped function will be batched.\n     */\n    batchCalls: callback => {\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        schedule(() => {\n          callback(...args);\n        });\n      };\n    },\n    schedule,\n\n    /**\n     * Use this method to set a custom notify function.\n     * This can be used to for example wrap notifications with `React.act` while running tests.\n     */\n    setNotifyFunction: fn => {\n      notifyFn = fn;\n    },\n\n    /**\n     * Use this method to set a custom function to batch notifications together into a single tick.\n     * By default React Query will use the batch function provided by ReactDOM or React Native.\n     */\n    setBatchNotifyFunction: fn => {\n      batchNotifyFn = fn;\n    },\n    setScheduler: fn => {\n      scheduleFn = fn;\n    }\n  };\n}\n\nvar notifyManager = createNotifyManager();\nexport { createNotifyManager, notifyManager };","map":{"version":3,"mappings":";AAYO,SAASA,mBAAT,GAA+B;AACpC,MAAIC,QAA+B,EAAnC;AACA,MAAIC,eAAe,CAAnB;;AACA,MAAIC,WAA4BC,QAAD,IAAc;AAC3CA;AACF,GAFA;;AAGA,MAAIC,gBAAsCD,QAAD,IAA0B;AACjEA;AACF,GAFA;;AAGA,MAAIE,aAAgCC,EAAD,IAAQC,WAAWD,EAAX,EAAe,CAAf,CAA3C;;AAEA,QAAME,WAAYL,QAAD,IAAoC;AACnD,QAAIF,YAAJ,EAAkB;AAChBD,YAAMS,IAAN,CAAWN,QAAX;AACF,KAFA,MAEO;AACLE,iBAAW,MAAM;AACfH,iBAASC,QAAT;AACD,OAFD;AAGF;AACF,GARA;;AASA,QAAMO,QAAQ,MAAY;AACxB,UAAMC,gBAAgBX,KAAtB;AACAA,YAAQ,EAAR;;AACA,QAAIW,cAAcC,MAAlB,EAA0B;AACxBP,iBAAW,MAAM;AACfD,sBAAc,MAAM;AAClBO,wBAAcE,OAAd,CAAuBV,QAAD,IAAc;AAClCD,qBAASC,QAAT;AACD,WAFD;AAGD,SAJD;AAKD,OAND;AAOF;AACF,GAZA;;AAcA,SAAO;AACLW,WAAWX,QAAJ,IAA6B;AAClC,UAAIY,MAAJ;AACAd;;AACA,UAAI;AACFc,iBAASZ,UAAT;AACF,OAFA,SAEE;AACAF;;AACA,YAAI,CAACA,YAAL,EAAmB;AACjBS;AACF;AACF;;AACA,aAAOK,MAAP;AACF,KAbK;;AAaL;AAAA;AAAA;AAIAC,gBACEb,QADU,IAEgB;AAC1B,aAAO,YAAa;AAAA,0CAATc,IAAS;AAATA,cAAS;AAAA;;AAClBT,iBAAS,MAAM;AACbL,mBAAS,GAAGc,IAAZ;AACD,SAFD;AAGF,OAJA;AAKF,KAzBK;AA0BLT,YA1BK;;AA0BL;AAAA;AAAA;AAAA;AAKAU,uBAAoBC,EAAD,IAAwB;AACzCjB,iBAAWiB,EAAX;AACF,KAjCK;;AAiCL;AAAA;AAAA;AAAA;AAKAC,4BAAyBD,EAAD,IAA6B;AACnDf,sBAAgBe,EAAhB;AACF,KAxCK;AAyCLE,kBAAeF,EAAD,IAA0B;AACtCd,mBAAac,EAAb;AACF;AA3CK,GAAP;AA6CF;;AAGO,IAAMG,gBAAgBvB,qBAAtB","names":["createNotifyManager","queue","transactions","notifyFn","callback","batchNotifyFn","scheduleFn","cb","setTimeout","schedule","push","flush","originalQueue","length","forEach","batch","result","batchCalls","args","setNotifyFunction","fn","setBatchNotifyFunction","setScheduler","notifyManager"],"sources":["/Users/harshini/Desktop/Social/client/node_modules/@tanstack/query-core/src/notifyManager.ts"],"sourcesContent":["// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\ntype BatchCallsCallback<T extends Array<unknown>> = (...args: T) => void\n\ntype ScheduleFunction = (callback: () => void) => void\n\nexport function createNotifyManager() {\n  let queue: Array<NotifyCallback> = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = (callback) => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n  let scheduleFn: ScheduleFunction = (cb) => setTimeout(cb, 0)\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleFn(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleFn(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  return {\n    batch: <T>(callback: () => T): T => {\n      let result\n      transactions++\n      try {\n        result = callback()\n      } finally {\n        transactions--\n        if (!transactions) {\n          flush()\n        }\n      }\n      return result\n    },\n    /**\n     * All calls to the wrapped function will be batched.\n     */\n    batchCalls: <T extends Array<unknown>>(\n      callback: BatchCallsCallback<T>,\n    ): BatchCallsCallback<T> => {\n      return (...args) => {\n        schedule(() => {\n          callback(...args)\n        })\n      }\n    },\n    schedule,\n    /**\n     * Use this method to set a custom notify function.\n     * This can be used to for example wrap notifications with `React.act` while running tests.\n     */\n    setNotifyFunction: (fn: NotifyFunction) => {\n      notifyFn = fn\n    },\n    /**\n     * Use this method to set a custom function to batch notifications together into a single tick.\n     * By default React Query will use the batch function provided by ReactDOM or React Native.\n     */\n    setBatchNotifyFunction: (fn: BatchNotifyFunction) => {\n      batchNotifyFn = fn\n    },\n    setScheduler: (fn: ScheduleFunction) => {\n      scheduleFn = fn\n    },\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n"]},"metadata":{},"sourceType":"module"}