{"ast":null,"code":"\"use client\"; // src/useQueries.ts\n\nimport * as React from \"react\";\nimport { QueriesObserver, QueryObserver, notifyManager } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\nimport { useIsRestoring } from \"./isRestoring.js\";\nimport { useQueryErrorResetBoundary } from \"./QueryErrorResetBoundary.js\";\nimport { ensurePreventErrorBoundaryRetry, getHasError, useClearResetErrorBoundary } from \"./errorBoundaryUtils.js\";\nimport { ensureSuspenseTimers, fetchOptimistic, shouldSuspend, willFetch } from \"./suspense.js\";\nimport { noop } from \"./utils.js\";\n\nfunction useQueries(_ref, queryClient) {\n  let {\n    queries,\n    ...options\n  } = _ref;\n  const client = useQueryClient(queryClient);\n  const isRestoring = useIsRestoring();\n  const errorResetBoundary = useQueryErrorResetBoundary();\n  const defaultedQueries = React.useMemo(() => queries.map(opts => {\n    const defaultedOptions = client.defaultQueryOptions(opts);\n    defaultedOptions._optimisticResults = isRestoring ? \"isRestoring\" : \"optimistic\";\n    return defaultedOptions;\n  }), [queries, client, isRestoring]);\n  defaultedQueries.forEach(query => {\n    ensureSuspenseTimers(query);\n    ensurePreventErrorBoundaryRetry(query, errorResetBoundary);\n  });\n  useClearResetErrorBoundary(errorResetBoundary);\n  const [observer] = React.useState(() => new QueriesObserver(client, defaultedQueries, options));\n  const [optimisticResult, getCombinedResult, trackResult] = observer.getOptimisticResult(defaultedQueries, options.combine);\n  const shouldSubscribe = !isRestoring && options.subscribed !== false;\n  React.useSyncExternalStore(React.useCallback(onStoreChange => shouldSubscribe ? observer.subscribe(notifyManager.batchCalls(onStoreChange)) : noop, [observer, shouldSubscribe]), () => observer.getCurrentResult(), () => observer.getCurrentResult());\n  React.useEffect(() => {\n    observer.setQueries(defaultedQueries, options, {\n      listeners: false\n    });\n  }, [defaultedQueries, options, observer]);\n  const shouldAtLeastOneSuspend = optimisticResult.some((result, index) => shouldSuspend(defaultedQueries[index], result));\n  const suspensePromises = shouldAtLeastOneSuspend ? optimisticResult.flatMap((result, index) => {\n    const opts = defaultedQueries[index];\n\n    if (opts) {\n      const queryObserver = new QueryObserver(client, opts);\n\n      if (shouldSuspend(opts, result)) {\n        return fetchOptimistic(opts, queryObserver, errorResetBoundary);\n      } else if (willFetch(result, isRestoring)) {\n        void fetchOptimistic(opts, queryObserver, errorResetBoundary);\n      }\n    }\n\n    return [];\n  }) : [];\n\n  if (suspensePromises.length > 0) {\n    throw Promise.all(suspensePromises);\n  }\n\n  const firstSingleResultWhichShouldThrow = optimisticResult.find((result, index) => {\n    const query = defaultedQueries[index];\n    return query && getHasError({\n      result,\n      errorResetBoundary,\n      throwOnError: query.throwOnError,\n      query: client.getQueryCache().get(query.queryHash),\n      suspense: query.suspense\n    });\n  });\n\n  if (firstSingleResultWhichShouldThrow?.error) {\n    throw firstSingleResultWhichShouldThrow.error;\n  }\n\n  return getCombinedResult(trackResult());\n}\n\nexport { useQueries };","map":{"version":3,"mappings":"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","names":["React","QueriesObserver","QueryObserver","notifyManager","useQueryClient","useIsRestoring","useQueryErrorResetBoundary","ensurePreventErrorBoundaryRetry","getHasError","useClearResetErrorBoundary","ensureSuspenseTimers","fetchOptimistic","shouldSuspend","willFetch","noop","useQueries","queryClient","queries","options","client","isRestoring","errorResetBoundary","defaultedQueries","map","opts","defaultedOptions","defaultQueryOptions","_optimisticResults","forEach","query","observer","optimisticResult","getCombinedResult","trackResult","getOptimisticResult","combine","shouldSubscribe","subscribed","onStoreChange","subscribe","batchCalls","getCurrentResult","setQueries","listeners","shouldAtLeastOneSuspend","some","result","index","suspensePromises","flatMap","queryObserver","length","Promise","all","firstSingleResultWhichShouldThrow","find","throwOnError","getQueryCache","get","queryHash","suspense","error"],"sources":["/Users/harshini/Desktop/Social/client/node_modules/@tanstack/react-query/src/useQueries.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport {\n  QueriesObserver,\n  QueryObserver,\n  notifyManager,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useIsRestoring } from './isRestoring'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport {\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch,\n} from './suspense'\nimport { noop } from './utils'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport type {\n  DefaultError,\n  OmitKeyof,\n  QueriesObserverOptions,\n  QueriesPlaceholderDataFunction,\n  QueryClient,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  ThrowOnError,\n} from '@tanstack/query-core'\n\n// This defines the `UseQueryOptions` that are accepted in `QueriesOptions` & `GetOptions`.\n// `placeholderData` function always gets undefined passed\ntype UseQueryOptionsForUseQueries<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = OmitKeyof<\n  UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  'placeholderData' | 'subscribed'\n> & {\n  placeholderData?: TQueryFnData | QueriesPlaceholderDataFunction<TQueryFnData>\n}\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\n// Widen the type of the symbol to enable type inference even if skipToken is not immutable.\ntype SkipTokenForUseQueries = symbol\n\ntype GetUseQueryOptionsForUseQueries<T> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n      ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n      : T extends { data: infer TData; error?: infer TError }\n        ? UseQueryOptionsForUseQueries<unknown, TError, TData>\n        : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n          T extends [infer TQueryFnData, infer TError, infer TData]\n          ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n          : T extends [infer TQueryFnData, infer TError]\n            ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n            : T extends [infer TQueryFnData]\n              ? UseQueryOptionsForUseQueries<TQueryFnData>\n              : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n                T extends {\n                    queryFn?:\n                      | QueryFunction<infer TQueryFnData, infer TQueryKey>\n                      | SkipTokenForUseQueries\n                    select?: (data: any) => infer TData\n                    throwOnError?: ThrowOnError<any, infer TError, any, any>\n                  }\n                ? UseQueryOptionsForUseQueries<\n                    TQueryFnData,\n                    unknown extends TError ? DefaultError : TError,\n                    unknown extends TData ? TQueryFnData : TData,\n                    TQueryKey\n                  >\n                : // Fallback\n                  UseQueryOptionsForUseQueries\n\n// A defined initialData setting should return a DefinedUseQueryResult rather than UseQueryResult\ntype GetDefinedOrUndefinedQueryResult<T, TData, TError = unknown> = T extends {\n  initialData?: infer TInitialData\n}\n  ? unknown extends TInitialData\n    ? UseQueryResult<TData, TError>\n    : TInitialData extends TData\n      ? DefinedUseQueryResult<TData, TError>\n      : TInitialData extends () => infer TInitialDataResult\n        ? unknown extends TInitialDataResult\n          ? UseQueryResult<TData, TError>\n          : TInitialDataResult extends TData\n            ? DefinedUseQueryResult<TData, TError>\n            : UseQueryResult<TData, TError>\n        : UseQueryResult<TData, TError>\n  : UseQueryResult<TData, TError>\n\ntype GetUseQueryResult<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n      ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData, TError>\n      : T extends { data: infer TData; error?: infer TError }\n        ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n        : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n          T extends [any, infer TError, infer TData]\n          ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n          : T extends [infer TQueryFnData, infer TError]\n            ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData, TError>\n            : T extends [infer TQueryFnData]\n              ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData>\n              : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n                T extends {\n                    queryFn?:\n                      | QueryFunction<infer TQueryFnData, any>\n                      | SkipTokenForUseQueries\n                    select?: (data: any) => infer TData\n                    throwOnError?: ThrowOnError<any, infer TError, any, any>\n                  }\n                ? GetDefinedOrUndefinedQueryResult<\n                    T,\n                    unknown extends TData ? TQueryFnData : TData,\n                    unknown extends TError ? DefaultError : TError\n                  >\n                : // Fallback\n                  UseQueryResult\n\n/**\n * QueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type QueriesOptions<\n  T extends Array<any>,\n  TResults extends Array<any> = [],\n  TDepth extends ReadonlyArray<number> = [],\n> = TDepth['length'] extends MAXIMUM_DEPTH\n  ? Array<UseQueryOptionsForUseQueries>\n  : T extends []\n    ? []\n    : T extends [infer Head]\n      ? [...TResults, GetUseQueryOptionsForUseQueries<Head>]\n      : T extends [infer Head, ...infer Tails]\n        ? QueriesOptions<\n            [...Tails],\n            [...TResults, GetUseQueryOptionsForUseQueries<Head>],\n            [...TDepth, 1]\n          >\n        : ReadonlyArray<unknown> extends T\n          ? T\n          : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n            // use this to infer the param types in the case of Array.map() argument\n            T extends Array<\n                UseQueryOptionsForUseQueries<\n                  infer TQueryFnData,\n                  infer TError,\n                  infer TData,\n                  infer TQueryKey\n                >\n              >\n            ? Array<\n                UseQueryOptionsForUseQueries<\n                  TQueryFnData,\n                  TError,\n                  TData,\n                  TQueryKey\n                >\n              >\n            : // Fallback\n              Array<UseQueryOptionsForUseQueries>\n\n/**\n * QueriesResults reducer recursively maps type param to results\n */\nexport type QueriesResults<\n  T extends Array<any>,\n  TResults extends Array<any> = [],\n  TDepth extends ReadonlyArray<number> = [],\n> = TDepth['length'] extends MAXIMUM_DEPTH\n  ? Array<UseQueryResult>\n  : T extends []\n    ? []\n    : T extends [infer Head]\n      ? [...TResults, GetUseQueryResult<Head>]\n      : T extends [infer Head, ...infer Tails]\n        ? QueriesResults<\n            [...Tails],\n            [...TResults, GetUseQueryResult<Head>],\n            [...TDepth, 1]\n          >\n        : { [K in keyof T]: GetUseQueryResult<T[K]> }\n\nexport function useQueries<\n  T extends Array<any>,\n  TCombinedResult = QueriesResults<T>,\n>(\n  {\n    queries,\n    ...options\n  }: {\n    queries:\n      | readonly [...QueriesOptions<T>]\n      | readonly [...{ [K in keyof T]: GetUseQueryOptionsForUseQueries<T[K]> }]\n    combine?: (result: QueriesResults<T>) => TCombinedResult\n    subscribed?: boolean\n  },\n  queryClient?: QueryClient,\n): TCombinedResult {\n  const client = useQueryClient(queryClient)\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n\n  const defaultedQueries = React.useMemo(\n    () =>\n      queries.map((opts) => {\n        const defaultedOptions = client.defaultQueryOptions(\n          opts as QueryObserverOptions,\n        )\n\n        // Make sure the results are already in fetching state before subscribing or updating options\n        defaultedOptions._optimisticResults = isRestoring\n          ? 'isRestoring'\n          : 'optimistic'\n\n        return defaultedOptions\n      }),\n    [queries, client, isRestoring],\n  )\n\n  defaultedQueries.forEach((query) => {\n    ensureSuspenseTimers(query)\n    ensurePreventErrorBoundaryRetry(query, errorResetBoundary)\n  })\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new QueriesObserver<TCombinedResult>(\n        client,\n        defaultedQueries,\n        options as QueriesObserverOptions<TCombinedResult>,\n      ),\n  )\n\n  // note: this must be called before useSyncExternalStore\n  const [optimisticResult, getCombinedResult, trackResult] =\n    observer.getOptimisticResult(\n      defaultedQueries,\n      (options as QueriesObserverOptions<TCombinedResult>).combine,\n    )\n\n  const shouldSubscribe = !isRestoring && options.subscribed !== false\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        shouldSubscribe\n          ? observer.subscribe(notifyManager.batchCalls(onStoreChange))\n          : noop,\n      [observer, shouldSubscribe],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(\n      defaultedQueries,\n      options as QueriesObserverOptions<TCombinedResult>,\n      {\n        listeners: false,\n      },\n    )\n  }, [defaultedQueries, options, observer])\n\n  const shouldAtLeastOneSuspend = optimisticResult.some((result, index) =>\n    shouldSuspend(defaultedQueries[index], result),\n  )\n\n  const suspensePromises = shouldAtLeastOneSuspend\n    ? optimisticResult.flatMap((result, index) => {\n        const opts = defaultedQueries[index]\n\n        if (opts) {\n          const queryObserver = new QueryObserver(client, opts)\n          if (shouldSuspend(opts, result)) {\n            return fetchOptimistic(opts, queryObserver, errorResetBoundary)\n          } else if (willFetch(result, isRestoring)) {\n            void fetchOptimistic(opts, queryObserver, errorResetBoundary)\n          }\n        }\n        return []\n      })\n    : []\n\n  if (suspensePromises.length > 0) {\n    throw Promise.all(suspensePromises)\n  }\n  const firstSingleResultWhichShouldThrow = optimisticResult.find(\n    (result, index) => {\n      const query = defaultedQueries[index]\n      return (\n        query &&\n        getHasError({\n          result,\n          errorResetBoundary,\n          throwOnError: query.throwOnError,\n          query: client.getQueryCache().get(query.queryHash),\n          suspense: query.suspense,\n        })\n      )\n    },\n  )\n\n  if (firstSingleResultWhichShouldThrow?.error) {\n    throw firstSingleResultWhichShouldThrow.error\n  }\n\n  return getCombinedResult(trackResult())\n}\n"]},"metadata":{},"sourceType":"module"}