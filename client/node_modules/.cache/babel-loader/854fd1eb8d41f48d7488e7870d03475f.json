{"ast":null,"code":"// src/hydration.ts\nfunction defaultTransformerFn(data) {\n  return data;\n}\n\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.options.scope && {\n      scope: mutation.options.scope\n    }),\n    ...(mutation.meta && {\n      meta: mutation.meta\n    })\n  };\n}\n\nfunction dehydrateQuery(query, serializeData, shouldRedactErrors) {\n  return {\n    state: { ...query.state,\n      ...(query.state.data !== void 0 && {\n        data: serializeData(query.state.data)\n      })\n    },\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.state.status === \"pending\" && {\n      promise: query.promise?.then(serializeData).catch(error => {\n        if (!shouldRedactErrors(error)) {\n          return Promise.reject(error);\n        }\n\n        if (process.env.NODE_ENV !== \"production\") {\n          console.error(`A query that was dehydrated as pending ended up rejecting. [${query.queryHash}]: ${error}; The error will be redacted in production builds`);\n        }\n\n        return Promise.reject(new Error(\"redacted\"));\n      })\n    }),\n    ...(query.meta && {\n      meta: query.meta\n    })\n  };\n}\n\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\n\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === \"success\";\n}\n\nfunction defaultshouldRedactErrors(_) {\n  return true;\n}\n\nfunction dehydrate(client) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const filterMutation = options.shouldDehydrateMutation ?? client.getDefaultOptions().dehydrate?.shouldDehydrateMutation ?? defaultShouldDehydrateMutation;\n  const mutations = client.getMutationCache().getAll().flatMap(mutation => filterMutation(mutation) ? [dehydrateMutation(mutation)] : []);\n  const filterQuery = options.shouldDehydrateQuery ?? client.getDefaultOptions().dehydrate?.shouldDehydrateQuery ?? defaultShouldDehydrateQuery;\n  const shouldRedactErrors = options.shouldRedactErrors ?? client.getDefaultOptions().dehydrate?.shouldRedactErrors ?? defaultshouldRedactErrors;\n  const serializeData = options.serializeData ?? client.getDefaultOptions().dehydrate?.serializeData ?? defaultTransformerFn;\n  const queries = client.getQueryCache().getAll().flatMap(query => filterQuery(query) ? [dehydrateQuery(query, serializeData, shouldRedactErrors)] : []);\n  return {\n    mutations,\n    queries\n  };\n}\n\nfunction hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== \"object\" || dehydratedState === null) {\n    return;\n  }\n\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache();\n  const deserializeData = options?.defaultOptions?.deserializeData ?? client.getDefaultOptions().hydrate?.deserializeData ?? defaultTransformerFn;\n  const mutations = dehydratedState.mutations || [];\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(_ref => {\n    let {\n      state,\n      ...mutationOptions\n    } = _ref;\n    mutationCache.build(client, { ...client.getDefaultOptions().hydrate?.mutations,\n      ...options?.defaultOptions?.mutations,\n      ...mutationOptions\n    }, state);\n  });\n  queries.forEach(_ref2 => {\n    let {\n      queryKey,\n      state,\n      queryHash,\n      meta,\n      promise\n    } = _ref2;\n    let query = queryCache.get(queryHash);\n    const data = state.data === void 0 ? state.data : deserializeData(state.data);\n\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        const {\n          fetchStatus: _ignored,\n          ...serializedState\n        } = state;\n        query.setState({ ...serializedState,\n          data\n        });\n      }\n    } else {\n      query = queryCache.build(client, { ...client.getDefaultOptions().hydrate?.queries,\n        ...options?.defaultOptions?.queries,\n        queryKey,\n        queryHash,\n        meta\n      }, // Reset fetch status to idle to avoid\n      // query being stuck in fetching state upon hydration\n      { ...state,\n        data,\n        fetchStatus: \"idle\"\n      });\n    }\n\n    if (promise) {\n      const initialPromise = Promise.resolve(promise).then(deserializeData);\n      void query.fetch(void 0, {\n        initialPromise\n      });\n    }\n  });\n}\n\nexport { defaultShouldDehydrateMutation, defaultShouldDehydrateQuery, defaultshouldRedactErrors, dehydrate, hydrate };","map":{"version":3,"mappings":"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","names":["defaultTransformerFn","data","dehydrateMutation","mutation","mutationKey","options","state","scope","meta","dehydrateQuery","query","serializeData","shouldRedactErrors","queryKey","queryHash","status","promise","then","catch","error","Promise","reject","process","env","NODE_ENV","console","Error","defaultShouldDehydrateMutation","isPaused","defaultShouldDehydrateQuery","defaultshouldRedactErrors","_","dehydrate","client","filterMutation","shouldDehydrateMutation","getDefaultOptions","mutations","getMutationCache","getAll","flatMap","filterQuery","shouldDehydrateQuery","queries","getQueryCache","hydrate","dehydratedState","mutationCache","queryCache","deserializeData","defaultOptions","forEach","mutationOptions","build","get","dataUpdatedAt","fetchStatus","_ignored","serializedState","setState","initialPromise","resolve","fetch"],"sources":["/Users/harshini/Desktop/Social/client/node_modules/@tanstack/query-core/src/hydration.ts"],"sourcesContent":["import type {\n  DefaultError,\n  MutationKey,\n  MutationMeta,\n  MutationOptions,\n  MutationScope,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\ntype TransformerFn = (data: any) => any\nfunction defaultTransformerFn(data: any): any {\n  return data\n}\n\nexport interface DehydrateOptions {\n  serializeData?: TransformerFn\n  shouldDehydrateMutation?: (mutation: Mutation) => boolean\n  shouldDehydrateQuery?: (query: Query) => boolean\n  shouldRedactErrors?: (error: unknown) => boolean\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    deserializeData?: TransformerFn\n    queries?: QueryOptions\n    mutations?: MutationOptions<unknown, DefaultError, unknown, unknown>\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n  meta?: MutationMeta\n  scope?: MutationScope\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n  promise?: Promise<unknown>\n  meta?: QueryMeta\n}\n\nexport interface DehydratedState {\n  mutations: Array<DehydratedMutation>\n  queries: Array<DehydratedQuery>\n}\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.options.scope && { scope: mutation.options.scope }),\n    ...(mutation.meta && { meta: mutation.meta }),\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(\n  query: Query,\n  serializeData: TransformerFn,\n  shouldRedactErrors: (error: unknown) => boolean,\n): DehydratedQuery {\n  return {\n    state: {\n      ...query.state,\n      ...(query.state.data !== undefined && {\n        data: serializeData(query.state.data),\n      }),\n    },\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.state.status === 'pending' && {\n      promise: query.promise?.then(serializeData).catch((error) => {\n        if (!shouldRedactErrors(error)) {\n          // Reject original error if it should not be redacted\n          return Promise.reject(error)\n        }\n        // If not in production, log original error before rejecting redacted error\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\n            `A query that was dehydrated as pending ended up rejecting. [${query.queryHash}]: ${error}; The error will be redacted in production builds`,\n          )\n        }\n        return Promise.reject(new Error('redacted'))\n      }),\n    }),\n    ...(query.meta && { meta: query.meta }),\n  }\n}\n\nexport function defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nexport function defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function defaultshouldRedactErrors(_: unknown) {\n  return true\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {},\n): DehydratedState {\n  const filterMutation =\n    options.shouldDehydrateMutation ??\n    client.getDefaultOptions().dehydrate?.shouldDehydrateMutation ??\n    defaultShouldDehydrateMutation\n\n  const mutations = client\n    .getMutationCache()\n    .getAll()\n    .flatMap((mutation) =>\n      filterMutation(mutation) ? [dehydrateMutation(mutation)] : [],\n    )\n\n  const filterQuery =\n    options.shouldDehydrateQuery ??\n    client.getDefaultOptions().dehydrate?.shouldDehydrateQuery ??\n    defaultShouldDehydrateQuery\n\n  const shouldRedactErrors =\n    options.shouldRedactErrors ??\n    client.getDefaultOptions().dehydrate?.shouldRedactErrors ??\n    defaultshouldRedactErrors\n\n  const serializeData =\n    options.serializeData ??\n    client.getDefaultOptions().dehydrate?.serializeData ??\n    defaultTransformerFn\n\n  const queries = client\n    .getQueryCache()\n    .getAll()\n    .flatMap((query) =>\n      filterQuery(query)\n        ? [dehydrateQuery(query, serializeData, shouldRedactErrors)]\n        : [],\n    )\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions,\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n  const deserializeData =\n    options?.defaultOptions?.deserializeData ??\n    client.getDefaultOptions().hydrate?.deserializeData ??\n    defaultTransformerFn\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach(({ state, ...mutationOptions }) => {\n    mutationCache.build(\n      client,\n      {\n        ...client.getDefaultOptions().hydrate?.mutations,\n        ...options?.defaultOptions?.mutations,\n        ...mutationOptions,\n      },\n      state,\n    )\n  })\n\n  queries.forEach(({ queryKey, state, queryHash, meta, promise }) => {\n    let query = queryCache.get(queryHash)\n\n    const data =\n      state.data === undefined ? state.data : deserializeData(state.data)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        // omit fetchStatus from dehydrated state\n        // so that query stays in its current fetchStatus\n        const { fetchStatus: _ignored, ...serializedState } = state\n        query.setState({\n          ...serializedState,\n          data,\n        })\n      }\n    } else {\n      // Restore query\n      query = queryCache.build(\n        client,\n        {\n          ...client.getDefaultOptions().hydrate?.queries,\n          ...options?.defaultOptions?.queries,\n          queryKey,\n          queryHash,\n          meta,\n        },\n        // Reset fetch status to idle to avoid\n        // query being stuck in fetching state upon hydration\n        {\n          ...state,\n          data,\n          fetchStatus: 'idle',\n        },\n      )\n    }\n\n    if (promise) {\n      // Note: `Promise.resolve` required cause\n      // RSC transformed promises are not thenable\n      const initialPromise = Promise.resolve(promise).then(deserializeData)\n\n      // this doesn't actually fetch - it just creates a retryer\n      // which will re-use the passed `initialPromise`\n      void query.fetch(undefined, { initialPromise })\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}