{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react'; // https://github.com/sindresorhus/is-plain-obj/blob/main/index.js\n\nexport function isPlainObject(item) {\n  if (typeof item !== 'object' || item === null) {\n    return false;\n  }\n\n  const prototype = Object.getPrototypeOf(item);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in item) && !(Symbol.iterator in item);\n}\n\nfunction deepClone(source) {\n  if ( /*#__PURE__*/React.isValidElement(source) || !isPlainObject(source)) {\n    return source;\n  }\n\n  const output = {};\n  Object.keys(source).forEach(key => {\n    output[key] = deepClone(source[key]);\n  });\n  return output;\n}\n\nexport default function deepmerge(target, source) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    clone: true\n  };\n  const output = options.clone ? _extends({}, target) : target;\n\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      if ( /*#__PURE__*/React.isValidElement(source[key])) {\n        output[key] = source[key];\n      } else if (isPlainObject(source[key]) && // Avoid prototype pollution\n      Object.prototype.hasOwnProperty.call(target, key) && isPlainObject(target[key])) {\n        // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.\n        output[key] = deepmerge(target[key], source[key], options);\n      } else if (options.clone) {\n        output[key] = isPlainObject(source[key]) ? deepClone(source[key]) : source[key];\n      } else {\n        output[key] = source[key];\n      }\n    });\n  }\n\n  return output;\n}","map":{"version":3,"sources":["/Users/harshini/Desktop/Social/client/node_modules/@mui/utils/esm/deepmerge/deepmerge.js"],"names":["_extends","React","isPlainObject","item","prototype","Object","getPrototypeOf","Symbol","toStringTag","iterator","deepClone","source","isValidElement","output","keys","forEach","key","deepmerge","target","options","clone","hasOwnProperty","call"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB,C,CAEA;;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAClC,MAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,KAAK,IAAzC,EAA+C;AAC7C,WAAO,KAAP;AACD;;AACD,QAAMC,SAAS,GAAGC,MAAM,CAACC,cAAP,CAAsBH,IAAtB,CAAlB;AACA,SAAO,CAACC,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAKC,MAAM,CAACD,SAA3C,IAAwDC,MAAM,CAACC,cAAP,CAAsBF,SAAtB,MAAqC,IAA9F,KAAuG,EAAEG,MAAM,CAACC,WAAP,IAAsBL,IAAxB,CAAvG,IAAwI,EAAEI,MAAM,CAACE,QAAP,IAAmBN,IAArB,CAA/I;AACD;;AACD,SAASO,SAAT,CAAmBC,MAAnB,EAA2B;AACzB,OAAK,aAAaV,KAAK,CAACW,cAAN,CAAqBD,MAArB,KAAgC,CAACT,aAAa,CAACS,MAAD,CAAhE,EAA0E;AACxE,WAAOA,MAAP;AACD;;AACD,QAAME,MAAM,GAAG,EAAf;AACAR,EAAAA,MAAM,CAACS,IAAP,CAAYH,MAAZ,EAAoBI,OAApB,CAA4BC,GAAG,IAAI;AACjCH,IAAAA,MAAM,CAACG,GAAD,CAAN,GAAcN,SAAS,CAACC,MAAM,CAACK,GAAD,CAAP,CAAvB;AACD,GAFD;AAGA,SAAOH,MAAP;AACD;;AACD,eAAe,SAASI,SAAT,CAAmBC,MAAnB,EAA2BP,MAA3B,EAEZ;AAAA,MAF+CQ,OAE/C,uEAFyD;AAC1DC,IAAAA,KAAK,EAAE;AADmD,GAEzD;AACD,QAAMP,MAAM,GAAGM,OAAO,CAACC,KAAR,GAAgBpB,QAAQ,CAAC,EAAD,EAAKkB,MAAL,CAAxB,GAAuCA,MAAtD;;AACA,MAAIhB,aAAa,CAACgB,MAAD,CAAb,IAAyBhB,aAAa,CAACS,MAAD,CAA1C,EAAoD;AAClDN,IAAAA,MAAM,CAACS,IAAP,CAAYH,MAAZ,EAAoBI,OAApB,CAA4BC,GAAG,IAAI;AACjC,WAAK,aAAaf,KAAK,CAACW,cAAN,CAAqBD,MAAM,CAACK,GAAD,CAA3B,CAAlB,EAAqD;AACnDH,QAAAA,MAAM,CAACG,GAAD,CAAN,GAAcL,MAAM,CAACK,GAAD,CAApB;AACD,OAFD,MAEO,IAAId,aAAa,CAACS,MAAM,CAACK,GAAD,CAAP,CAAb,IACX;AACAX,MAAAA,MAAM,CAACD,SAAP,CAAiBiB,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CF,GAA7C,CAFW,IAE0Cd,aAAa,CAACgB,MAAM,CAACF,GAAD,CAAP,CAF3D,EAE0E;AAC/E;AACAH,QAAAA,MAAM,CAACG,GAAD,CAAN,GAAcC,SAAS,CAACC,MAAM,CAACF,GAAD,CAAP,EAAcL,MAAM,CAACK,GAAD,CAApB,EAA2BG,OAA3B,CAAvB;AACD,OALM,MAKA,IAAIA,OAAO,CAACC,KAAZ,EAAmB;AACxBP,QAAAA,MAAM,CAACG,GAAD,CAAN,GAAcd,aAAa,CAACS,MAAM,CAACK,GAAD,CAAP,CAAb,GAA6BN,SAAS,CAACC,MAAM,CAACK,GAAD,CAAP,CAAtC,GAAsDL,MAAM,CAACK,GAAD,CAA1E;AACD,OAFM,MAEA;AACLH,QAAAA,MAAM,CAACG,GAAD,CAAN,GAAcL,MAAM,CAACK,GAAD,CAApB;AACD;AACF,KAbD;AAcD;;AACD,SAAOH,MAAP;AACD","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\n\n// https://github.com/sindresorhus/is-plain-obj/blob/main/index.js\nexport function isPlainObject(item) {\n  if (typeof item !== 'object' || item === null) {\n    return false;\n  }\n  const prototype = Object.getPrototypeOf(item);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in item) && !(Symbol.iterator in item);\n}\nfunction deepClone(source) {\n  if ( /*#__PURE__*/React.isValidElement(source) || !isPlainObject(source)) {\n    return source;\n  }\n  const output = {};\n  Object.keys(source).forEach(key => {\n    output[key] = deepClone(source[key]);\n  });\n  return output;\n}\nexport default function deepmerge(target, source, options = {\n  clone: true\n}) {\n  const output = options.clone ? _extends({}, target) : target;\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      if ( /*#__PURE__*/React.isValidElement(source[key])) {\n        output[key] = source[key];\n      } else if (isPlainObject(source[key]) &&\n      // Avoid prototype pollution\n      Object.prototype.hasOwnProperty.call(target, key) && isPlainObject(target[key])) {\n        // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.\n        output[key] = deepmerge(target[key], source[key], options);\n      } else if (options.clone) {\n        output[key] = isPlainObject(source[key]) ? deepClone(source[key]) : source[key];\n      } else {\n        output[key] = source[key];\n      }\n    });\n  }\n  return output;\n}"]},"metadata":{},"sourceType":"module"}