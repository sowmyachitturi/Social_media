{"ast":null,"code":"// src/infiniteQueryBehavior.ts\nimport { addToEnd, addToStart, ensureQueryFn } from \"./utils.js\";\n\nfunction infiniteQueryBehavior(pages) {\n  return {\n    onFetch: (context, query) => {\n      const options = context.options;\n      const direction = context.fetchOptions?.meta?.fetchMore?.direction;\n      const oldPages = context.state.data?.pages || [];\n      const oldPageParams = context.state.data?.pageParams || [];\n      let result = {\n        pages: [],\n        pageParams: []\n      };\n      let currentPage = 0;\n\n      const fetchFn = async () => {\n        let cancelled = false;\n\n        const addSignalProperty = object => {\n          Object.defineProperty(object, \"signal\", {\n            enumerable: true,\n            get: () => {\n              if (context.signal.aborted) {\n                cancelled = true;\n              } else {\n                context.signal.addEventListener(\"abort\", () => {\n                  cancelled = true;\n                });\n              }\n\n              return context.signal;\n            }\n          });\n        };\n\n        const queryFn = ensureQueryFn(context.options, context.fetchOptions);\n\n        const fetchPage = async (data, param, previous) => {\n          if (cancelled) {\n            return Promise.reject();\n          }\n\n          if (param == null && data.pages.length) {\n            return Promise.resolve(data);\n          }\n\n          const queryFnContext = {\n            client: context.client,\n            queryKey: context.queryKey,\n            pageParam: param,\n            direction: previous ? \"backward\" : \"forward\",\n            meta: context.options.meta\n          };\n          addSignalProperty(queryFnContext);\n          const page = await queryFn(queryFnContext);\n          const {\n            maxPages\n          } = context.options;\n          const addTo = previous ? addToStart : addToEnd;\n          return {\n            pages: addTo(data.pages, page, maxPages),\n            pageParams: addTo(data.pageParams, param, maxPages)\n          };\n        };\n\n        if (direction && oldPages.length) {\n          const previous = direction === \"backward\";\n          const pageParamFn = previous ? getPreviousPageParam : getNextPageParam;\n          const oldData = {\n            pages: oldPages,\n            pageParams: oldPageParams\n          };\n          const param = pageParamFn(options, oldData);\n          result = await fetchPage(oldData, param, previous);\n        } else {\n          const remainingPages = pages ?? oldPages.length;\n\n          do {\n            const param = currentPage === 0 ? oldPageParams[0] ?? options.initialPageParam : getNextPageParam(options, result);\n\n            if (currentPage > 0 && param == null) {\n              break;\n            }\n\n            result = await fetchPage(result, param);\n            currentPage++;\n          } while (currentPage < remainingPages);\n        }\n\n        return result;\n      };\n\n      if (context.options.persister) {\n        context.fetchFn = () => {\n          return context.options.persister?.(fetchFn, {\n            client: context.client,\n            queryKey: context.queryKey,\n            meta: context.options.meta,\n            signal: context.signal\n          }, query);\n        };\n      } else {\n        context.fetchFn = fetchFn;\n      }\n    }\n  };\n}\n\nfunction getNextPageParam(options, _ref) {\n  let {\n    pages,\n    pageParams\n  } = _ref;\n  const lastIndex = pages.length - 1;\n  return pages.length > 0 ? options.getNextPageParam(pages[lastIndex], pages, pageParams[lastIndex], pageParams) : void 0;\n}\n\nfunction getPreviousPageParam(options, _ref2) {\n  let {\n    pages,\n    pageParams\n  } = _ref2;\n  return pages.length > 0 ? options.getPreviousPageParam?.(pages[0], pages, pageParams[0], pageParams) : void 0;\n}\n\nfunction hasNextPage(options, data) {\n  if (!data) return false;\n  return getNextPageParam(options, data) != null;\n}\n\nfunction hasPreviousPage(options, data) {\n  if (!data || !options.getPreviousPageParam) return false;\n  return getPreviousPageParam(options, data) != null;\n}\n\nexport { hasNextPage, hasPreviousPage, infiniteQueryBehavior };","map":{"version":3,"mappings":"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","names":["addToEnd","addToStart","ensureQueryFn","infiniteQueryBehavior","pages","onFetch","context","query","options","direction","fetchOptions","meta","fetchMore","oldPages","state","data","oldPageParams","pageParams","result","currentPage","fetchFn","cancelled","addSignalProperty","object","Object","defineProperty","enumerable","get","signal","aborted","addEventListener","queryFn","fetchPage","param","previous","Promise","reject","length","resolve","queryFnContext","client","queryKey","pageParam","page","maxPages","addTo","pageParamFn","getPreviousPageParam","getNextPageParam","oldData","remainingPages","initialPageParam","persister","lastIndex","hasNextPage","hasPreviousPage"],"sources":["/Users/harshini/Desktop/Social/client/node_modules/@tanstack/query-core/src/infiniteQueryBehavior.ts"],"sourcesContent":["import { addToEnd, addToStart, ensureQueryFn } from './utils'\nimport type { QueryBehavior } from './query'\nimport type {\n  InfiniteData,\n  InfiniteQueryPageParamsOptions,\n  OmitKeyof,\n  QueryFunctionContext,\n  QueryKey,\n} from './types'\n\nexport function infiniteQueryBehavior<TQueryFnData, TError, TData, TPageParam>(\n  pages?: number,\n): QueryBehavior<TQueryFnData, TError, InfiniteData<TData, TPageParam>> {\n  return {\n    onFetch: (context, query) => {\n      const options = context.options as InfiniteQueryPageParamsOptions<TData>\n      const direction = context.fetchOptions?.meta?.fetchMore?.direction\n      const oldPages = context.state.data?.pages || []\n      const oldPageParams = context.state.data?.pageParams || []\n      let result: InfiniteData<unknown> = { pages: [], pageParams: [] }\n      let currentPage = 0\n\n      const fetchFn = async () => {\n        let cancelled = false\n        const addSignalProperty = (object: unknown) => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              if (context.signal.aborted) {\n                cancelled = true\n              } else {\n                context.signal.addEventListener('abort', () => {\n                  cancelled = true\n                })\n              }\n              return context.signal\n            },\n          })\n        }\n\n        const queryFn = ensureQueryFn(context.options, context.fetchOptions)\n\n        // Create function to fetch a page\n        const fetchPage = async (\n          data: InfiniteData<unknown>,\n          param: unknown,\n          previous?: boolean,\n        ): Promise<InfiniteData<unknown>> => {\n          if (cancelled) {\n            return Promise.reject()\n          }\n\n          if (param == null && data.pages.length) {\n            return Promise.resolve(data)\n          }\n\n          const queryFnContext: OmitKeyof<\n            QueryFunctionContext<QueryKey, unknown>,\n            'signal'\n          > = {\n            client: context.client,\n            queryKey: context.queryKey,\n            pageParam: param,\n            direction: previous ? 'backward' : 'forward',\n            meta: context.options.meta,\n          }\n\n          addSignalProperty(queryFnContext)\n\n          const page = await queryFn(\n            queryFnContext as QueryFunctionContext<QueryKey, unknown>,\n          )\n\n          const { maxPages } = context.options\n          const addTo = previous ? addToStart : addToEnd\n\n          return {\n            pages: addTo(data.pages, page, maxPages),\n            pageParams: addTo(data.pageParams, param, maxPages),\n          }\n        }\n\n        // fetch next / previous page?\n        if (direction && oldPages.length) {\n          const previous = direction === 'backward'\n          const pageParamFn = previous ? getPreviousPageParam : getNextPageParam\n          const oldData = {\n            pages: oldPages,\n            pageParams: oldPageParams,\n          }\n          const param = pageParamFn(options, oldData)\n\n          result = await fetchPage(oldData, param, previous)\n        } else {\n          const remainingPages = pages ?? oldPages.length\n\n          // Fetch all pages\n          do {\n            const param =\n              currentPage === 0\n                ? (oldPageParams[0] ?? options.initialPageParam)\n                : getNextPageParam(options, result)\n            if (currentPage > 0 && param == null) {\n              break\n            }\n            result = await fetchPage(result, param)\n            currentPage++\n          } while (currentPage < remainingPages)\n        }\n\n        return result\n      }\n      if (context.options.persister) {\n        context.fetchFn = () => {\n          return context.options.persister?.(\n            fetchFn as any,\n            {\n              client: context.client,\n              queryKey: context.queryKey,\n              meta: context.options.meta,\n              signal: context.signal,\n            },\n            query,\n          )\n        }\n      } else {\n        context.fetchFn = fetchFn\n      }\n    },\n  }\n}\n\nfunction getNextPageParam(\n  options: InfiniteQueryPageParamsOptions<any>,\n  { pages, pageParams }: InfiniteData<unknown>,\n): unknown | undefined {\n  const lastIndex = pages.length - 1\n  return pages.length > 0\n    ? options.getNextPageParam(\n        pages[lastIndex],\n        pages,\n        pageParams[lastIndex],\n        pageParams,\n      )\n    : undefined\n}\n\nfunction getPreviousPageParam(\n  options: InfiniteQueryPageParamsOptions<any>,\n  { pages, pageParams }: InfiniteData<unknown>,\n): unknown | undefined {\n  return pages.length > 0\n    ? options.getPreviousPageParam?.(pages[0], pages, pageParams[0], pageParams)\n    : undefined\n}\n\n/**\n * Checks if there is a next page.\n */\nexport function hasNextPage(\n  options: InfiniteQueryPageParamsOptions<any, any>,\n  data?: InfiniteData<unknown>,\n): boolean {\n  if (!data) return false\n  return getNextPageParam(options, data) != null\n}\n\n/**\n * Checks if there is a previous page.\n */\nexport function hasPreviousPage(\n  options: InfiniteQueryPageParamsOptions<any, any>,\n  data?: InfiniteData<unknown>,\n): boolean {\n  if (!data || !options.getPreviousPageParam) return false\n  return getPreviousPageParam(options, data) != null\n}\n"]},"metadata":{},"sourceType":"module"}